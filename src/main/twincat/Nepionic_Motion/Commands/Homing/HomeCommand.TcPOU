<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="HomeCommand" Id="{517256b3-8391-4233-9af6-0bb5e27e1fcd}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'linkalways'} 
{attribute 'no_explicit_call' := 'This FB is a CLASS and must be accessed using methods or properties'}
{attribute 'enable_dynamic_creation'}
FUNCTION_BLOCK HomeCommand EXTENDS Mc2Command
VAR
	fb : Tc2_Mc2.Mc_Home;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="CyclicCall" Id="{31bbba72-1e8e-47ee-8a66-552d86497abf}">
      <Declaration><![CDATA[METHOD PUBLIC CyclicCall]]></Declaration>
      <Implementation>
        <ST><![CDATA[SUPER^.CyclicCall();
fb(Axis := axis_ref);]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_Init" Id="{e4e46bb4-bea9-4312-9329-19efff41832f}">
      <Declaration><![CDATA[(*FB_Init is always available implicitly and it is used primarily for initialization.
The return value is not evaluated. For a specific influence, you can also declare the
methods explicitly and provide additional code there with the standard initialization
code. You can evaluate the return value.*)
METHOD FB_Init : BOOL
VAR_INPUT
	(* TRUE: the retain variables are initialized (reset warm / reset cold)*)
	bInitRetains : BOOL;
	(* TRUE: the instance will be copied to the copy code afterward (online change)*)
	bInCopyCode	: BOOL;
	axis : Axis;
	position : LREAL := Tc2_Mc2.Default_Home_Position;
	homing_mode : HomingMode := HomingMode.Default;
	buffer_mode	: MotionBufferMode := MotionBufferMode.Aborting;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[fb.Position := position;
fb.HomingMode := Mc2HomingModeConvertTo(homing_mode);
fb.BufferMode := Mc2BufferModeConvertTo(buffer_mode);]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnExecuting" Id="{9508e2de-9d28-425c-b0a6-3b92a2a5ba7b}">
      <Declaration><![CDATA[METHOD PROTECTED OnExecuting
VAR_INPUT
	state_control : AsyncCommandStateControl;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[fb.Execute := TRUE;

IF fb.Done THEN
	state_control.Next();
	fb.Execute := FALSE;
END_IF

IF fb.CommandAborted THEN
	Abort();
	fb.Execute := FALSE;
END_IF

IF fb.Error THEN
	state_control.Error(fb.ErrorId);
	fb.Execute := FALSE;
END_IF]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>