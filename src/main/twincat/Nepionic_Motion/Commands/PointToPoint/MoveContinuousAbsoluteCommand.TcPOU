<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="MoveContinuousAbsoluteCommand" Id="{6c410028-0f8e-0c4b-2dc9-f58d4a1f70d8}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'linkalways'} 
{attribute 'no_explicit_call' := 'This FB is a CLASS and must be accessed using methods or properties'}
{attribute 'enable_dynamic_creation'}
FUNCTION_BLOCK MoveContinuousAbsoluteCommand EXTENDS Mc2MotionCommand
VAR
	fb : Tc2_Mc2.Mc_MoveContinuousAbsolute;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Property Name="Active" Id="{75a57f1c-2fce-0e8c-1c81-94505b046fe8}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
PROPERTY PUBLIC Active : BOOL]]></Declaration>
      <Get Name="Get" Id="{25d942d0-23e6-0749-3803-c535ab9bd051}">
        <Declaration><![CDATA[PUBLIC]]></Declaration>
        <Implementation>
          <ST><![CDATA[Active := fb.Active;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="CyclicCall" Id="{2de98865-a2f7-0641-2dc7-9966f852425d}">
      <Declaration><![CDATA[METHOD PUBLIC CyclicCall]]></Declaration>
      <Implementation>
        <ST><![CDATA[SUPER^.CyclicCall();
fb(Axis := axis_ref);]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_Init" Id="{d9383dc8-1b7f-09ff-14d5-5a1614c5da46}">
      <Declaration><![CDATA[(*FB_Init is always available implicitly and it is used primarily for initialization.
The return value is not evaluated. For a specific influence, you can also declare the
methods explicitly and provide additional code there with the standard initialization
code. You can evaluate the return value.*)
METHOD FB_Init : BOOL
VAR_INPUT
	(* TRUE: the retain variables are initialized (reset warm / reset cold)*)
	bInitRetains : BOOL;
	(* TRUE: the instance will be copied to the copy code afterward (online change)*)
	bInCopyCode	: BOOL;
	axis : Axis;
	position : LREAL;
	velocity : LREAL;
	acceleration : LREAL := 0;
	deceleration : LREAL := 0;
	jerk : LREAL := 0;
	buffer_mode	: MotionBufferMode := MotionBufferMode.Aborting;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[fb.Position := position;
fb.Velocity := velocity;
fb.Acceleration := acceleration;
fb.Deceleration := deceleration;
fb.Jerk := jerk;
fb.BufferMode := Mc2BufferModeConvertTo(buffer_mode);]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnExecuting" Id="{2e7cb451-fe55-0c4b-1318-98ac80394ef7}">
      <Declaration><![CDATA[METHOD PROTECTED OnExecuting
VAR_INPUT
	state_control : AsyncCommandStateControl;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[fb.Execute := TRUE;

IF fb.InEndVelocity THEN
	state_control.Next();
	fb.Execute := FALSE;
END_IF

IF fb.CommandAborted THEN
	Abort();
	fb.Execute := FALSE;
END_IF

IF fb.Error THEN
	state_control.Error(fb.ErrorId);
	fb.Execute := FALSE;
END_IF]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>